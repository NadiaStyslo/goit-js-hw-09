{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAWC,SAASC,cAAc,UAClCC,EAASF,SAASC,cAAc,QAmCtC,SAASE,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC1B,IAAMC,EAAgBC,KAAKC,SAAW,GACvCC,YAAW,WACLH,GACHF,EAAQ,uBAAwCM,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEnDG,EAAK,sBAAuCK,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAErDA,E,IA1CPH,EAAOY,MAAMC,QAAU,OACvBb,EAAOY,MAAME,SAAW,OACxBd,EAAOY,MAAMG,cAAgB,SAC7BlB,EAASe,MAAME,SAAW,OAC1BjB,EAASe,MAAMI,OAAS,MACxBhB,EAAOY,MAAMK,QAAU,MAEvBjB,EAAOkB,iBAAiB,SAIxB,SAAgBC,GACdA,EAAIC,iBAQJ,IAPA,IAA+BC,EAAAF,EAAIG,cAAcC,SAA1CpB,EAAwBkB,EAAxBlB,MAAOqB,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAChBC,EAAWC,OAAOxB,EAAMyB,OACxBC,EAAUF,OAAOH,EAAKI,OACtBE,EAAWH,OAAOF,EAAOG,OAG3B1B,EAAW,EACJ6B,EAAI,EAAGA,GAAKD,EAAUC,GAAK,EAClC9B,EAAcC,EAAUwB,GACrBM,MAAK,SAAAC,G,OACJtC,EAAAuC,OAAOC,QAAQF,E,IAGhBG,OAAM,SAAAC,G,OACL1C,EAAAuC,OAAOI,QAAQD,E,IACnBnC,GAAY,EACZwB,GAAsBG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst buttonEl = document.querySelector('button')\nconst formEl = document.querySelector('form')\n//console.log(buttonEl)\nformEl.style.display = 'flex';\nformEl.style.fontSize = '30px';\nformEl.style.flexDirection = 'column'\nbuttonEl.style.fontSize = '30px';\nbuttonEl.style.margin = '6px';\nformEl.style.padding = '5px'\n//buttonEl.addEventListener('sumbit', onSumbit);\nformEl.addEventListener('click', onForm)\n\n\n//function onSumbit() { }\nfunction onForm(evt) {\n  evt.preventDefault();\n  const {delay, step, amount } = evt.currentTarget.elements;\n  let delayVal = Number(delay.value);\n  let stepVal = Number(step.value);\n  let amoutVal = Number(amount.value);\n\n\nlet position = 1\n  for (let i = 1; i <= amoutVal; i += 1) {\n    createPromise(position, delayVal)\n      .then(result =>\n        Notify.success(result)\n      )\n      \n      .catch(error =>\n        Notify.failure(error))\n    position += 1;\n    delayVal = delayVal + stepVal\n  \n  }\n  }\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n     const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n       resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      \n    }, delay) \n    })\n    \n    \n  }\n \n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$buttonEl","document","querySelector","$ce04d3a99e08e73b$var$formEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","style","display","fontSize","flexDirection","margin","padding","addEventListener","evt","preventDefault","_elements","currentTarget","elements","step","amount","delayVal","Number","value","stepVal","amoutVal","i","then","result","Notify","success","catch","error","failure"],"version":3,"file":"03-promises.dc2a1708.js.map"}